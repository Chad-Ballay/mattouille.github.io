<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MattOuille.com</title>
    <description>Tutorials, OpEds, and Musings by Matt Ouille</description>
    <link>https://www.mattouille.com/</link>
    <atom:link href="https://www.mattouille.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 21 Oct 2017 16:50:30 +0200</pubDate>
    <lastBuildDate>Sat, 21 Oct 2017 16:50:30 +0200</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>S3 Bucket Security and Best Practices</title>
        <description>&lt;p&gt;There’s been a litany of companies with unsecured S3 buckets including &lt;a href=&quot;https://www.theregister.co.uk/2017/09/22/verizon_falls_for_the_old_unguarded_aws_s3_bucket_trick_exposes_internal_system/&quot;&gt;Verizon&lt;/a&gt;, &lt;a href=&quot;https://www.theregister.co.uk/2017/10/10/accenture_amazon_aws_s3/&quot;&gt;Accenture&lt;/a&gt;, &lt;a href=&quot;https://threatpost.com/four-million-time-warner-cable-records-left-on-misconfigured-aws-s3/127807/&quot;&gt;TimeWarner&lt;/a&gt;, and the list goes on.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-a-vulnerable-s3-bucket&quot;&gt;So what is a vulnerable S3 bucket?&lt;/h2&gt;

&lt;h3 id=&quot;acls-and-policies&quot;&gt;ACLs and policies&lt;/h3&gt;

&lt;p&gt;S3 has some quirks. First and foremost that I’ve identified is it’s &lt;em&gt;permissions system&lt;/em&gt; known as &lt;em&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html&quot;&gt;ACL’s&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html&quot;&gt;Policies&lt;/a&gt;&lt;/em&gt;. I’m going to kick this off with &lt;strong&gt;vanilla S3 buckets DENY by default.&lt;/strong&gt; There’s a nice little ACL that comes with every bucket that allows access account wide and that’s it. If you create an S3 bucket and do nothing else with it, this bucket is largely secure (unless someone gains access to your account, but that’s out of scope here).&lt;/p&gt;

&lt;p&gt;ACL’s are just as they sound, they’re &lt;em&gt;access control lists&lt;/em&gt; where you can grant permissions or denies to accounts, users, groups, etc…&lt;/p&gt;

&lt;p&gt;Policies are very fine grained, expressive, and written in JSON. They’re very comparable to ACL’s, except they require referencing &lt;em&gt;existing&lt;/em&gt; resources with ARN’s (Amazon Resource Names).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what’s the difference?&lt;/strong&gt; &lt;a href=&quot;https://aws.amazon.com/blogs/security/iam-policies-and-bucket-policies-and-acls-oh-my-controlling-access-to-s3-resources/&quot;&gt;Amazon regards S3 ACL’s as legacy&lt;/a&gt;, so I don’t use them aside for the given ACL (&lt;em&gt;ALLOW&lt;/em&gt; to resources in your account). In fact, in most cases I’ll remove that ACL and define a policy to reflect it if it’s needed. The reason I do this is maintaining a &lt;em&gt;single source of truth&lt;/em&gt;. &lt;strong&gt;In many cases if you mix ACL’s and policies determining the outcome can become very tricky and cumbersome.&lt;/strong&gt; Policies reflect on all the objects in an S3 bucket, Amazon phrases this as they’re &lt;em&gt;postured at the bucket level&lt;/em&gt;. &lt;strong&gt;This means if you find yourself in a predicament where some objects need a policy and others don’t they should likely be in different buckets.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, I know you can apply policies to folders, but really in the age of IaaS I’m sure you’ve discovered this can be cumbersome as well. Let’s examine that scenario below:&lt;/p&gt;

&lt;p&gt;Let’s say I’m using Terraform (or CloudFormation) to provision an S3 bucket. The whole goal with IaaS is to provision and require &lt;em&gt;zero&lt;/em&gt; manual steps. I define my S3 Bucket, next I need to create a policy and specify the bucket it attaches to. &lt;em&gt;Keep in mind I can only reference things in my policy that already exist&lt;/em&gt;. I would actually have to create a script that goes and creates a folder and then executes the policy creation and attachment. In this case it’s not only easier but safer to provision different buckets for different policies.&lt;/p&gt;

&lt;h2 id=&quot;let-the-best-practices-begin&quot;&gt;Let the best practices begin.&lt;/h2&gt;

&lt;h3 id=&quot;reining-in-the-policies&quot;&gt;Reining in the policies&lt;/h3&gt;

&lt;p&gt;One of the unfortunate things that I see frequently is engineers or developers using &lt;code class=&quot;highlighter-rouge&quot;&gt;Principal: &quot;*&quot;&lt;/code&gt; in policies. &lt;em&gt;Principal&lt;/em&gt; is the &lt;em&gt;who&lt;/em&gt; in &lt;em&gt;&lt;strong&gt;who&lt;/strong&gt; can use &lt;strong&gt;what&lt;/strong&gt;&lt;/em&gt; while &lt;em&gt;Resource&lt;/em&gt; refers to &lt;em&gt;what&lt;/em&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;*&quot;&lt;/code&gt; actually indicates that &lt;em&gt;any resource&lt;/em&gt; can use the bucket you’ve assigned this to, including resources or users outside your account. I can literally log onto another computer with AWS CLI installed and read or post files to your S3 bucket if your policies aren’t specified correctly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can try this by using a computer with no (or different) AWS credentials and the CLI installed. Simply create a file, apply a junk principal policy and copy it in with &lt;code class=&quot;highlighter-rouge&quot;&gt;aws s3 cp file.txt s3://yourbucket/&lt;/code&gt;. Voila! Go ahead, make it interesting and throw some ACL denies in there too. Watch as your efforts are futile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Principal: &quot;*&quot;&lt;/code&gt; is useful if you have a website hosted off of Amazon S3. I might use a policy like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http referer policy example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow get requests originating from www.example.com and example.com.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:GetObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::examplebucket/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringLike&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws:Referer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.example.com/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://example.com/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Explicit deny to ensure requests are allowed only from specific referer.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::examplebucket/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringNotLike&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws:Referer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.example.com/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://example.com/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example not only have I attributed an explicit &lt;em&gt;ALLOW&lt;/em&gt; but I’ve also attributed an explicit &lt;em&gt;DENY&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reciprocity-is-worth-mentioning&quot;&gt;Reciprocity is worth mentioning&lt;/h3&gt;

&lt;p&gt;A lot of folks that I find making unsafe S3 policies are doing so because they can’t figure out the mess between ACL’s and Policies (which I’ve now explained) as well as reciprocity between &lt;em&gt;IAM Policies&lt;/em&gt; and &lt;em&gt;Bucket Policies&lt;/em&gt;. Anything that you reflect in your &lt;em&gt;Bucket Policy&lt;/em&gt; should reflect in your &lt;em&gt;IAM Policy&lt;/em&gt;. IAM Policies are used conjoiningly with STS:AssumeRole and Trusts. If I grant &lt;em&gt;s3:GetObject&lt;/em&gt; in my Bucket Policy, I need to grant &lt;em&gt;s3:GetObject&lt;/em&gt; in my IAM Policy TO that resource. &lt;strong&gt;AGAIN&lt;/strong&gt;, make it to the specific resource rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;*&quot;&lt;/code&gt; unless you have a very good reason.&lt;/p&gt;

&lt;h3 id=&quot;lock-everything-down-to-roles&quot;&gt;Lock everything down to roles&lt;/h3&gt;

&lt;p&gt;I always make a habit of &lt;strong&gt;referencing roles with Principals&lt;/strong&gt;. A principal can be assigned to a variety of things such as an &lt;em&gt;account&lt;/em&gt;, &lt;em&gt;user&lt;/em&gt;, &lt;em&gt;role&lt;/em&gt;, and &lt;em&gt;service&lt;/em&gt;. That said, just because you &lt;em&gt;can&lt;/em&gt; doesn’t mean you &lt;em&gt;should&lt;/em&gt;. Rather than giving all your EC2 instances access with &lt;code class=&quot;highlighter-rouge&quot;&gt;Service: ec2.amazonaws.com&lt;/code&gt; specify the rule and assign an STS Trust to that IAM Profile. You could equate this to the “Principal of least privilege”, much like buckets and bucket permissions could be described as “Doing one thing and doing it well”.&lt;/p&gt;

&lt;h3 id=&quot;kms-and-sse&quot;&gt;KMS and SSE&lt;/h3&gt;

&lt;p&gt;AWS provides the &lt;em&gt;Key Management Service&lt;/em&gt; (For everything) and &lt;em&gt;Server Side Encryption&lt;/em&gt; (For S3 Buckets). When you upload and download files/objects you can specify an AWS KMS Key to use. Furthermore you can restrict keys using policies! The same approach you used with bucket policies can be used with KMS Key policies, restricting them to certain roles is &lt;em&gt;always&lt;/em&gt; a hardy best practice. This keeps everything segregated but also continuing to flow nicely without stoppages. Additionally, should an instance or resource with a particular role ever be compromised you can simply roll that &lt;em&gt;one&lt;/em&gt; KMS key. You can refer to AWS KMS Key’s using Bucket Policy conditionals.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PutObjPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DenyUnEncryptedObjectUploads&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:PutObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::YourBucket/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringNotEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:x-amz-server-side-encryption&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws:kms&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above policy allows you to use &lt;em&gt;any&lt;/em&gt; or the &lt;em&gt;default&lt;/em&gt; KMS key, however, you can further specify keys in your conditional: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;s3:x-amz-server-side-encryption-aws-kms-key-id&quot;: &quot;arn:aws:kms:region:acct-id:key/key-id&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I won’t delve too much into &lt;a href=&quot;http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html&quot;&gt;KMS Key Policies but they can be explained here&lt;/a&gt; and, again, are much like the bucket policies I explained above.&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.rapid7.com/2013/03/27/open-s3-buckets/&quot;&gt;Hacking S3 Buckets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0200</pubDate>
        <link>https://www.mattouille.com/articles/2017-10/s3-bucket-security-and-best-practices</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-10/s3-bucket-security-and-best-practices</guid>
        
        <category>Security</category>
        
        <category>AWS</category>
        
        <category>S3</category>
        
        
        <category>Cloud</category>
        
        <category>Infrastructure</category>
        
      </item>
    
      <item>
        <title>Docker and Docker-Compose for the developing mind</title>
        <description>&lt;p&gt;&lt;strong&gt;What’s docker?&lt;/strong&gt;
I think a lot of folks that read my blog will already know what Docker is, however, I’ll give a brief explanation anyway. Docker is a wrapper around Linux Containers (LXC) written in Go. It uses some REST API’s to communicate with the docker daemon to be able to start up containers and relies on IPTables for networking along with the docker bridge.&lt;/p&gt;

&lt;p&gt;Docker is a powerful tool because the same image I generate locally on my machine can be deployed into production, or the code can be committed and be made part of your &lt;em&gt;CI/CD Pipeline&lt;/em&gt;. Other local development environment tools such as vagrant use virtual machines which are based on &lt;em&gt;Xen&lt;/em&gt;, &lt;em&gt;KVM&lt;/em&gt;, or &lt;em&gt;VMWare&lt;/em&gt;. Unfortunately, building a vagrant box doesn’t really translate to building an image that can be deployed to AWS or Google Cloud. There are products that facilitate this like &lt;em&gt;Packer&lt;/em&gt; (From HashiCorp as well), however, it’s a bit of a stretch to get developers to start using this, much less to start using it to bring up local environments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terminology&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Term&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Host OS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Relatively, this is your machine or the server that has the container running on it.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guest OS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;This usually is reserved for virtual machines, but it’s fair to use the term when describing the operating system the container image is based on.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ephemeral&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Temporary or short lived.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Immutable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Indicates a lack of data persistence. No data is stored on something that is immutable. The underlying term actually means ‘&lt;em&gt;replaceable&lt;/em&gt;’.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;
The Dockerfile basically describes how to build your image. Dockerfiles are relatively simple. In fact, &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;here’s the entire reference for Dockerfile&lt;/a&gt;, take a quick glance over it. You can do simple things like exposing ports to the host OS (making things externally accessible), you can attach volumes that can add persistence to Docker (Docker and Linux Containers are ephemeral and immutable by nature), you can add existing directories, etc… The Dockerfile is the quintessential for building custom images that run on Docker containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker-compose&lt;/strong&gt;
Docker has an accompanying application called &lt;strong&gt;docker-compose&lt;/strong&gt;. If you’re using OSX then the install for Docker already comes with it, if you’re using Linux or Windows you’ll need to download it separately.&lt;/p&gt;

&lt;p&gt;Rarely do we ever just run one application by itself. Frequently we need to run an application, a data source, and any other piece of infrastructure it may be dependent on. In this example I’m going to use a real Dockerfile and docker-compose that I wrote for a FOSS project I’ve been working on. The docker-compose is yaml based and represents various container and images pairs as &lt;em&gt;services&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building our Dockerfile&lt;/strong&gt;
The framework I’m using is called Django which is python based. All I need is an OS with Python 3. All publicly available Docker images are based on some type of OS with all the non-essentials removed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;FROM python:3.6

ENV PYTHONUNBUFFERED 1

RUN mkdir /code

WORKDIR /code

ADD requirements.txt /code/

RUN pip install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt

ADD &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /code/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; we’re using the &lt;em&gt;python&lt;/em&gt; image from &lt;a href=&quot;https://hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt; with a &lt;a href=&quot;https://hub.docker.com/_/python/&quot;&gt;label of 3.6&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ENV&lt;/strong&gt; sets an environment variable in &lt;em&gt;Key Value&lt;/em&gt; format. If you had multiple you’d use multiple &lt;strong&gt;ENV&lt;/strong&gt;’s.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RUN&lt;/strong&gt; This indicates executes a command using the default shell. We’re making the preliminary directory called &lt;em&gt;code&lt;/em&gt; in the root of the guest OS (note the prefixed slash).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;WORKDIR&lt;/strong&gt; Changes the working directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;/code&lt;/code&gt;. The commands using this context are specific to &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt; Copies a file to your Docker image. You might’ve noticed there’s a command called &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; that is remarkably similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;. There’s two key differences.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Add allows the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;src&amp;gt;&lt;/code&gt; to be a url.&lt;/li&gt;
      &lt;li&gt;Add will decompress recognized compressed files.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choose wisely!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RUN&lt;/strong&gt; I need pip to process my requirements.txt. We’re executing a normal shell command here, just as if we were sitting at the terminal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt; We’re now copying my existing code repository to Docker image.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! If all we wanted to do was build the image and run the container then Django would come up. You’d simply:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This indicates to docker: Build my image, search for the Dockerfile in this directory (.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker create &amp;lt;image id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this point your docker container would run but would not be externally accessible (we never specified &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPOSE&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.3'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgres&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;theseus&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python code/manage.py runserver 0.0.0.0:8000&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/code&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8000:8000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;version&lt;/strong&gt; specifies which version of the &lt;a href=&quot;https://docs.docker.com/compose/compose-file/&quot;&gt;docker-compose reference&lt;/a&gt; to use.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;services&lt;/strong&gt; Each top level is essentially a different container. Services are special because they can resolve each other by their service name. For instance, I can reach &lt;em&gt;db&lt;/em&gt; from &lt;em&gt;web&lt;/em&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;ping db&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;db/image&lt;/strong&gt; In this case I’m telling docker-compose to use the Docker Hub image for postgres. Notice there’s no label selected, Docker will assume &lt;em&gt;latest&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;db/environment&lt;/strong&gt; I’m setting an environment variable in a Key: Value format. The postgres page on Docker Hub has some nice instructions on features they’ve put into the postgres image.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;web/build&lt;/strong&gt; I’m indicating to docker-compose to run a docker build in ‘.’. This will build my Docker image. If I had multiple custom images I’d just place a Dockerfile in different directories.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;web/command&lt;/strong&gt; this is the command to run when the container starts. Notice I lost my context behind &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; in the Dockerfile. There’s a way to fix this, but I wanted to point it out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;web/volumes&lt;/strong&gt; I’m telling docker-compose that I want to mount /code as a volume. Changes I make in my code will be reflected into the container &lt;strong&gt;AND&lt;/strong&gt; vice versa. I’ll get into this later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;web/ports&lt;/strong&gt; This is the exposed port on the Host OS to the Guest OS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;web/depends_on&lt;/strong&gt; This tells docker-compose that it can’t start the web container until the db container is online.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Using docker-compose&lt;/strong&gt;. Before we were able to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; command to build, create, run etc… Now that we’re using docker-compose though, we have to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; command. If you don’t, you can still reach your containers but they’ll be without some of the essential networking that docker-compose gives you.&lt;/p&gt;

&lt;p&gt;You’ll need to create your code folder and generate a Django app, but after that simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;. This launches docker-compose in daemon mode. Leave out &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; when you’re troubleshooting. You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose ps&lt;/code&gt; to get the names of your containers and run commands on them like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose run -it &amp;lt;container name&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Technically we’re all done, but I wanted to show you something neat. Remember how I said in docker-compose you can reference services by name and they’ll resolve? In case it didn’t click, here’s an excerpt from my Django settings.py:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Database&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://docs.djangoproject.com/en/1.11/ref/settings/#databases&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'postgres'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'postgres'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'theseus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My host is using ‘&lt;em&gt;db&lt;/em&gt;’. That’s all for today, hopefully that’s helped get the gears spinning. There’s a lot more you can do with docker-compose and docker, so be sure to explore!&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Sep 2017 00:00:00 +0200</pubDate>
        <link>https://www.mattouille.com/articles/2017-09/docker-and-docker-compose-for-the-developing-mind</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-09/docker-and-docker-compose-for-the-developing-mind</guid>
        
        <category>Docker</category>
        
        <category>Docker-Compose</category>
        
        
        <category>Docker</category>
        
        <category>Systems</category>
        
      </item>
    
      <item>
        <title>Docker commands every dev should know</title>
        <description>&lt;p&gt;Docker is a really awesome containerization platform. It dutifully simplifies LXC (Linux Containers) and enables developers to develop faster. That said, at times Docker can be a tad confusing and things can get out of hand quickly if you’re not up to speed on your docker commands. These are all commands that I keep up to date on my GitHub gists page for docker, so I use them regularly as well.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;logging-into-a-container&quot;&gt;Logging into a container&lt;/h2&gt;

&lt;p&gt;It’s often really helpful to be able to log in to a container. I’ll often preload my images destined for a lower stage environment with some troubleshooting tools so I can have visibility into how incoming requests are being handled, etc…&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec -it my-app-container bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can replace &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt; if you’re on something like Alpine.&lt;/p&gt;

&lt;h2 id=&quot;list-containers-by-status-and-delete-them&quot;&gt;List containers by status and delete them&lt;/h2&gt;

&lt;p&gt;If you’ve been working on a build machine like Jenkins and haven’t done any clean up in a while you’ll probably notice a lot of what I’m about to cover.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -aq -f status=exited&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’d be surprised how many folks aren’t used to doing clean up at the end of their Jenkinsfile. No worries though, we can delete all these too!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm $(docker ps -aq -f status=exited)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$()&lt;/code&gt; causes the command inside it to be executed and everything on the outside to be run iteratively over the results. Docker was fashioned in a way to make things like this possible.&lt;/p&gt;

&lt;h2 id=&quot;but-volumes&quot;&gt;But volumes!&lt;/h2&gt;

&lt;p&gt;Volumes are not deleted alongside containers. You have to delete these separately. Once you delete a container and that volume is no longer associated to any container the volume is known to be in a &lt;strong&gt;dangling&lt;/strong&gt; state. We can remove all these fairly easily:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume rm $(docker volume ls -qf dangling=true)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;dont-forget-images&quot;&gt;Don’t forget images&lt;/h2&gt;

&lt;p&gt;Images are the last to remain and just easy to clean up. Images will frequently go into a dangling state as well when they’re no longer associated with a container.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rmi $(docker images --filter &quot;dangling=true&quot; -q --no-trunc)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As of Docker 1.13 you can also simplify all of the above using &lt;code class=&quot;highlighter-rouge&quot;&gt;docker network prune&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;docker system prune&lt;/code&gt;. That said, if you’re using a version prior to 1.13 and you encounter problems with images in use that aren’t really in use, simple tack -f or –force onto the rm or rmi command.&lt;/p&gt;

&lt;p&gt;I hope this has been educational for everyone!&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Jul 2017 00:00:00 +0200</pubDate>
        <link>https://www.mattouille.com/articles/2017-07/docker-commands-every-dev-should-know</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-07/docker-commands-every-dev-should-know</guid>
        
        <category>Docker</category>
        
        
        <category>Systems</category>
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>Pointers in Go</title>
        <description>&lt;p&gt;I’ve been learning Go recently and I’ve been having some issues solidifying my understanding of pointers, so I thought I’d write a quick blog post explaining what I’ve learned and how to easily understand it.&lt;/p&gt;

&lt;h2 id=&quot;what-are-pointers-and-why-are-they-useful&quot;&gt;What are pointers and why are they useful?&lt;/h2&gt;

&lt;p&gt;Simply put, pointers are variables that store a memory address to another variable. They’re useful because they allow us to essentially dynamically allocate memory. Here’s a nice anecdote to get you thinking:&lt;/p&gt;

&lt;p&gt;Say that we’re a mechanic looking for a car that we want to do work on in a very large car lot. To make it more impactful, we have some simple changes we want to make (like changing a light bulb). There is one attendant that can help us in one of two ways:&lt;/p&gt;

&lt;h3 id=&quot;the-first-way&quot;&gt;The first way&lt;/h3&gt;
&lt;p&gt;You can tell the attendant the license plate of the car you’re looking for. The attendant then goes to a map, locates the car, starts the car, and brings it to your bay. This sounds quite convenient, however, it’s not very efficient. It took time for the attendant to find the car, to bring you the car, and now it’s sitting in your bay amongst all your tools that you won’t use on modifying this car. Even moreso, because the attendant is the only one that can drive the car they have to take it out of your bay as well. This made things quite cumbersome.&lt;/p&gt;

&lt;h3 id=&quot;the-second-way-pointers&quot;&gt;The second way (pointers)&lt;/h3&gt;

&lt;p&gt;The attendant gives me a copy of the map, highlights where the car is, I go to the car with my lean toolset, change the light and walk back to my bay where I have a whole different car that I’m possibly doing much more work on.&lt;/p&gt;

&lt;p&gt;The key here is efficiency. In this case the car is a variable or struct. It’s quite expensive to drag a copy (This is how Go handles referencing) through a method, however, it’s quite inexpensive to copy the pointer (the map). A memory allocation on a 64 bit machine is 64 bits, that gets especially expensive when you’re dealing with a complex structure. The effect is the same, the same data is modified, it’s more a issue of how it’s referenced. One 64 bit pointer versus a struct which potentially occupies multiple spaces in memory.&lt;/p&gt;

&lt;h2 id=&quot;visualizing-my-explanation&quot;&gt;Visualizing my explanation&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Brand&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Brand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this instance, new car is pointing to the struct Car, and in it’s return value is accessing the memory allocation for Car and updating variables.&lt;/p&gt;

&lt;p&gt;In contrast:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Brand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this instance we’re bringing the entire struct “Car” into our method. While it’s light weight now, as the struct grows this will become quite cumbersome.&lt;/p&gt;

&lt;h2 id=&quot;use-of--and-&quot;&gt;Use of &amp;amp; and *&lt;/h2&gt;

&lt;p&gt;The best way I can portray this in simple English is this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; gets a memory allocation and allows modifying the struct or variable.
&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; is the variable where the memory reference is stored (pointer) and in our case above, type Car.&lt;/p&gt;

&lt;p&gt;Even more simply explained is this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2701&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// point to i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// read i through the pointer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// set i through the pointer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// see the new value of i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// point to j&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// divide j through the pointer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// see the new value of j&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully my explanation on pointers in Go has helped you, if you have any suggestions please leave them in the comments below!&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Jun 2017 00:00:00 +0200</pubDate>
        <link>https://www.mattouille.com/articles/2017-06/pointers-in-go</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-06/pointers-in-go</guid>
        
        <category>Go-lang</category>
        
        <category>Pointers</category>
        
        <category>Programming</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>“The Most Forgotten Pattern”</title>
        <description>&lt;p&gt;Developers love consistent ways of solving repeating problems, but the most consistent problem of them all is never solved repeatedly. Every time we sit down to solve problems with software we apply design patterns to overcome situations that would be contentious if we hadn’t already solved them years ago. There’s no point in reinventing the wheel, right? So why are we sitting here planning development of software for months on end still?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;some-men-just-like-to-watch-the-world-burn&quot;&gt;Some men just like to watch the world burn&lt;/h3&gt;

&lt;p&gt;Iterative development isn’t really a &lt;em&gt;design pattern&lt;/em&gt; but it is a pattern nonetheless. It’s a pattern used to overcome the hang in project velocity. Nothing sucks more than getting excited about your next project coming up other than trying to suck your own soul out with a vacuum while you plan every little piece of it three months in advance of even writing code.&lt;/p&gt;

&lt;p&gt;There’s a myriad of excuses for this behavior. Let’s review and refute a few:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I don’t want to waste my time developing something that will inevitably fail.&lt;/li&gt;
  &lt;li&gt;I want to make sure all the right resources are allocated to this &lt;em&gt;before we begin&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;I want to make sure this project stays within cost.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;All software is retired eventually folks. Even better, software is also continuously refactored, which sometimes results in an almost unrecognizable codebase. Can you possibly tell me that you’re going to find the crystal ball in some docs somewhere that say, “This is not possible” and that you will just accept it?&lt;/li&gt;
  &lt;li&gt;It is literally impossible to plan more than two weeks in advance. I will bake fifty cookies for the man or woman that can show me they can precisely plan (yes, it should be precise for the amount of time forward planning takes) two weeks in advance. Have you ever even taken a vacation that went &lt;em&gt;exactly&lt;/em&gt; as planned &lt;strong&gt;and&lt;/strong&gt; stayed on budget that you planned more than two weeks in advance?&lt;/li&gt;
  &lt;li&gt;Cost is a funny thing. Cost is reflective of a well practiced team. Nothing you do the first time will come cheap. You’re still figuring out the in’s and out’s. You’re still afraid to shut things down at night. Hell, you’re probably not even 10% the way through &lt;strong&gt;understanding&lt;/strong&gt; the documentation through the first iteration. Consider this: A well organized SRE team might be able to iteratively build on AWS or GCP very cheaply. Why? Because they automate their deployments, know pricing models, and since everything is ephemeral they aren’t afraid to tear down at night.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;one-potato-two-potato&quot;&gt;One potato, two potato&lt;/h3&gt;

&lt;p&gt;Iterative Development is simple. &lt;strong&gt;First&lt;/strong&gt;, quickly build a completely crap, fundamentally working prototype. Get the major features working, maybe it’s an API, or functions hooked up to a CLI - who cares. It may be totally unusable by the average person, but as long as someone can use it that’s what matters. &lt;strong&gt;Next&lt;/strong&gt;, recognize what you learned and what direction you can go from there. Steadily build on features but take time to revise your existing functionality. Rinse and repeat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The key here is discovery.&lt;/strong&gt; The team members involved are able to get very intimate with how the application should be developed. They can actively discover and fix pain points, or even prioritize a rewrite of certain aspects of the codebase while maintaining a forward velocity of &lt;strong&gt;major features&lt;/strong&gt;. This way there is no individual sprint dedicated to maintenance and refactoring, because it’s done on the fly, as needed, with the participation of the rest of the team.&lt;/p&gt;

&lt;p&gt;The day development becomes a chore, innovation and creativity die.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 May 2017 00:00:00 +0200</pubDate>
        <link>https://www.mattouille.com/articles/2017-05/the-most-forgotten-pattern</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-05/the-most-forgotten-pattern</guid>
        
        <category>Iterative Development</category>
        
        
        <category>OpEd</category>
        
      </item>
    
      <item>
        <title>The switch to Jekyll and updates</title>
        <description>&lt;p&gt;2017 has been really good to me and I’ve had the opportunity to grow a lot both
as as person and in my career. I’m currently writing this post sitting on my
back porch watching my dogs play.&lt;/p&gt;

&lt;p&gt;That said, earlier versions of my website were always based on Wordpress. While
Wordpress is a great functional FOSS blogging platform, it was really a bit
bloated for my needs. As a developer, and someone who is trying to make more
efficient use of their time, I was looking for something that got down to the
nuts and bolts of what I wanted without sacrificing too much functionality.&lt;/p&gt;

&lt;p&gt;In that I found Jekyll and GitHub pages. I kind of wrote this off as a poor
man’s solution to a common problem, however, I’ve discovered the elegance in
what Jekyll provides. Jekyll is categorized as a Static Site Generator written in
Ruby and extended through plugins and API driven services such as Disqus. You
can checkout Jekyll &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use a Mac and haven’t done a lot of Ruby focused projects so I was really
unaware of how to start. What I’ve figured out though is that between RVM and
HomeBrew you can get a sustainable environment going. I could probably also have
written a Dockerfile to do a lot of the dependency management for me, but I’m
only using one gem and that’s Jekyll itself.&lt;/p&gt;

&lt;p&gt;As for deployment, I already pay for GitHub. I was a little disappointed to
discover GitHub pages doesn’t support a CDN proxy to run SSL on custom domains
but I looped in CloudFlare for that. All in all, a blog post is just a commit
away and I can use Atom as a post editor.&lt;/p&gt;

&lt;p&gt;While I’ve been writing a lot of specific ‘getting started’ tutorials lately
I think it’s time that I start writing more Site Reliaibility Engineering focused
work. I currently work in an AWS environment but dumping my virtual machine
provider frees me up to do some AWS and GCP tutorials. Who knows, maybe I’ll get
froggy and do some Azure too.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 May 2017 00:00:00 +0200</pubDate>
        <link>https://www.mattouille.com/articles/2017-05/the-switch-to-jekyll-and-updates</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-05/the-switch-to-jekyll-and-updates</guid>
        
        <category>Updates</category>
        
        <category>Jekyll</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Test Driven Infrastructure Basics</title>
        <description>&lt;p&gt;Today I’m going to go over the basics of Test Driven Infrastructure, what it means, how to do it, when it applies, and why. In this tutorial I’m going to use Chef, but you can use whatever you want.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Test Driven Infrastructure&lt;/strong&gt; (TDI) is a term that’s been somewhat borrowed from the software engineering concept of &lt;strong&gt;Test Driven Development&lt;/strong&gt; (TDD). While TDD is somewhat questioned in certain facets, everybody can agree that automated testing is the best way forward. TDI basically implies that we build the tests before we build out infrastructure. If this sounds a little shocking, let me explain:&lt;/p&gt;

&lt;p&gt;Say I want to build a brand new server to host my blog and it’s database. We know we have some initial requirements which can fall under compliance (Securing SSH, establishing firewall rules, etc…). We also know that I’ll need Apache, PHP, and mySQL. Generally, we already know what to test before we build it as we’ve proven.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache2 is installed &amp;amp; running as a service&lt;/li&gt;
  &lt;li&gt;Apache2 listens on port 80&lt;/li&gt;
  &lt;li&gt;mySQL is installed &amp;amp; running as a service&lt;/li&gt;
  &lt;li&gt;mysqld is listening on port 3306/tcp via localhost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That wasn’t too difficult. How do we turn that into tests? You’re about to find out that it’s almost as easy as speaking English.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;&lt;i&gt;Why didn't I mentioned I'm using InSpec before? Most test frameworks are mostly the same. This is just about the basics.&lt;/i&gt;&lt;/div&gt;

&lt;p&gt;Depending on what Configuration Management software you use, you’ll have to configure your resource to be tested differently. Here’s my .kitchen.yml file&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vagrant&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;provisioner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chef_zero&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# You may wish to disable always updating cookbooks in CI or other testing environments.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# For example:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#   always_update_cookbooks: &amp;lt;%= !ENV['CI'] %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;always_update_cookbooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;verifier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;inspec&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;platforms&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-16.04&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;suites&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;recipe[mattouille::default]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;verifier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;inspec_tests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test/smoke/default&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our tests will be located relative to the .kitchen.yml file. Notice we specified &lt;code class=&quot;highlighter-rouge&quot;&gt;test/smoke/default&lt;/code&gt;. It’s labeled &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; because it’s in reference to default.rb. This helps us stay organized. Next create &lt;code class=&quot;highlighter-rouge&quot;&gt;default_test.rb&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; folder you just created.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; Every test document should be formatted with &lt;code class=&quot;highlighter-rouge&quot;&gt;*_test.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;InSpec is nice and simple. You can be as simple or as complex as you want. Here’s a &lt;a href=&quot;http://inspec.io/docs/&quot;&gt;copy of the documentation&lt;/a&gt; in case you were wondering where I get all this magical goodness.&lt;/p&gt;

&lt;p&gt;Let’s start out by defining our Apache test. Remember what we wrote down earlier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache2 is installed &amp;amp; running as a service&lt;/li&gt;
  &lt;li&gt;Apache2 listens on port 80&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apache2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_installed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_running&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apache2'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;explanation&quot;&gt;Explanation&lt;/h4&gt;

&lt;p&gt;InSpec (and other test frameworks) run agentless (from the host) after all the configuration magic has happened. First we check to make sure the package is installed. We can assume by this point that Apache &lt;em&gt;should&lt;/em&gt; be up and running rather painlessly. It is empty after all, with just the default start page. At the same time we check to make sure that the service is enabled. InSpec knows how to interact with SystemD on it’s own but has built in resources to check for SystemD, UpStart, etc… if you need them. Next, we make sure that the Apache2 process is the one listening on port 80. Now we’re all set!&lt;/p&gt;

&lt;p&gt;Lastly we’ll tackle mySQL. Here’s what we wrote down earlier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mySQL is installed &amp;amp; running as a service&lt;/li&gt;
  &lt;li&gt;mysqld is listening on port 3306/tcp via localhost&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# --- Apache Stuff ---&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql-server'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_installed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_running&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3306&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'protocols'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tcp'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysqld'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addresses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;explanation-1&quot;&gt;Explanation&lt;/h4&gt;

&lt;p&gt;MySQL gets a little trickier because you install the mysql-server package, there is a mysql service, however, mysqld is what handles all the interaction with data. First we check to see that the package is installed. Then we check to see that the service is enabled and running. Lastly we make sure that 3306 is open, listening for TCP requests via mysqld on 127.0.0.1.&lt;/p&gt;

&lt;div class=&quot;alert alert-warning&quot;&gt;If you go looking for the wrong process listening on a port, InSpec will actually tell you what process is listening. You should obviously verify that this is correct, but it definitely aids in the education process.&lt;/div&gt;

&lt;h4 id=&quot;profiles&quot;&gt;Profiles&lt;/h4&gt;

&lt;p&gt;Each framework has their own grouping mechanisms. InSpec calls theirs profiles. Review the changes I’ve made to our script below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Apache Daemon'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;impact&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Server: Configure daemon and service port'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
		Enable the service and specify the port used.
	'&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apache2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_installed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_running&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apache2'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MySQL Daemon'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;impact&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Server: Configure daemon and service port'&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
		Enable the service and specify the port and address used.
	'&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql-server'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_installed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_running&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3306&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'protocols'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tcp'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'processes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysqld'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addresses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ve added some additional information to cover the impact, group each test, and provide a brief description. At this point we could go ahead and write our configuration code. Once we’re done we can run our tests and make sure everything lined up. Let’s see what happens when I run &lt;code class=&quot;highlighter-rouge&quot;&gt;kitchen verify&lt;/code&gt; on my code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Verifying &amp;lt;default-ubuntu-1604&amp;gt;...
       Loaded  

Target:  ssh://vagrant@127.0.0.1:2222

  ✔  Apache Daemon: Server: Configure daemon and service port
     ✔  System Package apache2 should be installed
     ✔  Service apache2 should be enabled
     ✔  Service apache2 should be running
     ✔  Port 80 should be listening
     ✔  Port 80 processes should include &lt;span class=&quot;s2&quot;&gt;&quot;apache2&quot;&lt;/span&gt;
  ✔  MySQL Daemon: Server: Configure daemon and service port
     ✔  System Package mysql-server should be installed
     ✔  Service mysql should be enabled
     ✔  Service mysql should be running
     ✔  Port 3306 should be listening
     ✔  Port 3306 protocols should include &lt;span class=&quot;s2&quot;&gt;&quot;tcp&quot;&lt;/span&gt;
     ✔  Port 3306 processes should include &lt;span class=&quot;s2&quot;&gt;&quot;mysqld&quot;&lt;/span&gt;
     ✔  Port 3306 addresses should include &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;

Profile Summary: 2 successful, 0 failures, 0 skipped
Test Summary: 12 successful, 0 failures, 0 skipped
       Finished verifying &amp;lt;default-ubuntu-1604&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0m3.64s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Kitchen is finished. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0m4.66s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You probably can’t see it very well so I’ve highlighted the lines, but there’s checks out to the left of each test and profile. This means they passed! There’s obviously a lot more to discuss about TDI as well as testing that automated deployments occur correctly but that’s for a follow-on article.&lt;/p&gt;

&lt;h4 id=&quot;where-does-tdi-apply&quot;&gt;Where does TDI apply?&lt;/h4&gt;

&lt;p&gt;Well, this is kind of up to you. In terms of TDD, some people say you should build the tests first and the applications second. Others say you should be able to take an objective look at your infrastructure and understand the root of what it’s trying to accomplish and test for results. There’s arguments for both, but ultimately you and your organization need to make that decision. Regardless, deploying without testing is foolish.&lt;/p&gt;

&lt;h4 id=&quot;where-can-tdi-be-used&quot;&gt;Where can TDI be used?&lt;/h4&gt;

&lt;p&gt;TDI is really part of the CI/CD process. You can make this an integral part of your build process using Jenkins or GoCD, or you can test locally.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Mar 2017 00:00:00 +0100</pubDate>
        <link>https://www.mattouille.com/articles/2017-03/test-driven-infrastructure-basics</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-03/test-driven-infrastructure-basics</guid>
        
        <category>Inspec</category>
        
        
        <category>Infrastructure</category>
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>User error caused a massive S3 blackout</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;At 9:37AM PST, an authorized S3 team member using an established playbook executed a command which was intended to remove a small number of servers for one of the S3 subsystems that is used by the S3 billing process. Unfortunately, one of the inputs to the command was entered incorrectly and a larger set of servers was removed than intended. The servers that were inadvertently removed supported two other S3 subsystems.
source: https://aws.amazon.com/message/41926/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is this where we echo one of the great pillars of Linux? &lt;strong&gt;With great power comes great responsibility.&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Amazon actually has DevOps Engineering departments that build and manage their internal tooling. It’s very interesting that, even with a DevOps department, one of the foremost constructs of DevOps was not followed:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The emphasis is on the performance of the entire system, as opposed to the performance of a specific or single department or individual. Focus is also on all business value streams that are enabled by IT. &lt;strong&gt;A key aspect of this approach is ensuring that known defects are never passed along, e.g., from QA to operations.&lt;/strong&gt;
Source: http://itrevolution.com/the-three-ways-principles-underpinning-devops/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;What I’m pointing at is that there was nothing built into the tooling to indicate to the user that this action they had performed was going to yield the desired result. It was known that this was a dangerous and presumptive tool but it took nearly 24 hours of downtime to realize the tool needed to be changed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are making several changes as a result of this operational event. While removal of capacity is a key operational practice, in this instance, the tool used allowed too much capacity to be removed too quickly. We have modified this tool to remove capacity more slowly and added safeguards to prevent capacity from being removed when it will take any subsystem below its minimum required capacity level. This will prevent an incorrect input from triggering a similar event in the future. We are also auditing our other operational tools to ensure we have similar safety checks. We will also make changes to improve the recovery time of key S3 subsystems
Source: https://aws.amazon.com/message/41926/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think we can all learn a valuable lesson in building internal tooling. Though the tools are built for internal use only, you should never assume the user is any less capable of error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt;: https://aws.amazon.com/message/41926/&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0100</pubDate>
        <link>https://www.mattouille.com/articles/2017-03/user-error-caused-a-massive-s3-blackout</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-03/user-error-caused-a-massive-s3-blackout</guid>
        
        <category>AWS</category>
        
        <category>S3</category>
        
        <category>Post Mortem</category>
        
        
        <category>Opinion</category>
        
      </item>
    
      <item>
        <title>SendGrid DNS White Labeling and CloudFront for Secure Click Tracking Links</title>
        <description>&lt;p&gt;At StarLeaf we had a need to secure our SendGrid click tracking links, unfortunately our provider, SendGrid, had no way of sending HTTPS traffic with their in place white labeling solution. This is how we solved that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This solution does not solely apply to SendGrid as it’s a generic way to proxy HTTP URL’s to HTTPS. You can apply the solution I build here to nearly anything that requires proxying. CDN’s are a wonderful thing :)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An SSL Certficate on AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SendGrid really only provides an out of the box solution for working with Cloudflare and like many other enterprises we use Dyn / Route 53 for DNS and CloudFront for CDN services. We obviously like our fine grained control. We had some motivation to change things because one of our customers apparently cannot follow any links that are plain text (HTTP). Our original setup with SendGrid was using their legacy whitelabeling system which involved a CNAME to refer to SendGrid.net.&lt;/p&gt;

&lt;h3 id=&quot;our-original-sendgrid-diagram&quot;&gt;Our Original SendGrid Diagram&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://www.mattouille.com/img/posts/old_way.png&quot; alt=&quot;&quot; width=&quot;621&quot; height=&quot;81&quot; class=&quot;aligncenter size-full wp-image-49&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simple right? Simple isn’t always best but it does get the job done fast. SendGrid does not have the ability to handle our SSL Certificate, therefore, we had to establish our own intermediary.&lt;/p&gt;

&lt;p&gt;When we looked at enabling HTTPS on the click tracking links we found out that SendGrid recommends a proxy method via CDN but only officially supports Cloudflare and another provider. CloudFlare lacks some GeoDNS and round robin functionality which can be quite nice in enterprise so obviously this solution was not for us.&lt;/p&gt;

&lt;p&gt;Another solution we looked at was possibly including Cloudflare at the bottom of our resolution list and only letting it handle those records for click tracking. To us this was kind of messy and now involved a third DNS provider and eliminates the possibility of failover with another provider. We also got another challenge from management which was that this should be an exercise in maintaining legacy support. We had sent out thousands of emails with HTTP links so we should continue to support HTTP and just proxy the link to HTTPS.&lt;/p&gt;

&lt;p&gt;My team mate and I came up with a solution to convert the DNS white label on SendGrid over to their new CNAME based system.&lt;/p&gt;

&lt;p&gt;SendGrid provided us with the destination address and the destination for the CNAME records. Seemingly, they didn’t care about what happens in the middle so long as the request is finally received via HTTPS with a trusted certificate. We built out the following plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.mattouille.com/img/posts/new.png&quot; alt=&quot;&quot; width=&quot;707&quot; height=&quot;171&quot; class=&quot;aligncenter size-full wp-image-60&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We take on a bit of cost via CloudFront, but we gain end to end encryption and we’re retaining any old plain text traffic at the same time. The other challenge is that these URL’s are production and SendGrid has a window of time that they implement your SSL links in. This can make for a theoretical downtime of sorts. A lot of this hinges on the fact that we use DynDNS whose changes propagate all around the world in minutes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup a new SendGrid Domain and start using it (notify.whatever.com) (&lt;em&gt;This is your sending SMTP server and only matters if you’re migrating from their old CNAME method&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create Replica Amazon CloudFront Distribution from existing Beta Cloud Distribution. This may need up to one hour to propagate so complete it one hour prior to planned changeover. (&lt;em&gt;another_hash.cloudfront.net&lt;/em&gt;)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Do not enable HTTP to HTTPS proxying (server side) at first, enable HTTP to HTTPS redirection (client side)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setup verification and point to link.whatever.com to point at CloudFront (&lt;em&gt;Old links will still work&lt;/em&gt;)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This will initiate a couple minutes of downtime.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Have SendGrid do the change over to SSL.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enable proxying of requests in CloudFront.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This will likely take an additional hour&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Once SendGrid signals that they have committed the changeover to SSL we can now turn on proxying via CloudFront.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember that any changes you make to CloudFront take time to take effect, so change them once and change them right.&lt;/p&gt;

&lt;h3 id=&quot;sendgrid&quot;&gt;SendGrid&lt;/h3&gt;

&lt;p&gt;I’m going to make the assumption that the SendGrid portion of this is quite self explanatory. Their CNAME records will start working immediately once you implement them so you should not incur more than a minute of downtime during this process. This is also a good point to stop and test to make sure everything is going smoothly.&lt;/p&gt;

&lt;h3 id=&quot;cloudfront&quot;&gt;CloudFront&lt;/h3&gt;

&lt;p&gt;Here’s your CloudFront settings.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You want a Web Distribution.&lt;/li&gt;
  &lt;li&gt;Origin Domain Name: In the case of the diagram this is link.whatever.com&lt;/li&gt;
  &lt;li&gt;Path = None (This would be if we were assuming any URI, but we just want to mirror whatever the existing GET parameters are)&lt;/li&gt;
  &lt;li&gt;Viewer Protocol Policy: HTTP &amp;amp; HTTPS (These are the links we allow incoming)&lt;/li&gt;
  &lt;li&gt;Allowed HTTP Methods: We’re only concerned about &lt;strong&gt;GET &amp;amp; HEAD&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Query String Forwarding: Forward All, cache based on whitelist (We’re never caching these)&lt;/li&gt;
  &lt;li&gt;SSL Certificate: Custom SSL Certificate (You should’ve setup a SSL Certificate at the beginning of this tutorial. This is where you use it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This’ll take a bit to propagate but everything will work from here on out. Once SendGrid gives you the thumbs up, turn on HTTPS redirection for the Viewer Policy.&lt;/p&gt;

&lt;p&gt;I hope this helps anyone that’s been looking for a viable solution to implement SendGrid whitelisting with AWS!&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0100</pubDate>
        <link>https://www.mattouille.com/articles/2017-03/SendGrid-DNS-White-Labeling-and-CloudFront-for-Secure-Click-Tracking-Links</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-03/SendGrid-DNS-White-Labeling-and-CloudFront-for-Secure-Click-Tracking-Links</guid>
        
        <category>SendGrid</category>
        
        <category>AWS</category>
        
        <category>CloudFront</category>
        
        
        <category>Infrastructure</category>
        
      </item>
    
      <item>
        <title>Starting a Career in DevOps</title>
        <description>&lt;p&gt;A few years ago I got out of the military as a radio technician, but before I got out I had a ominous conversation with a long time friend explaining that I thought the future of an IT career lied in a mix of systems, programming and virtualization. At the time I really knew nothing about virtualization, had really only web and some Perl/Python experience and a life long love of Linux. Since then, my experience has turned it into a beautiful well-rounded career that’s only growing.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;“What is DevOps?”&lt;/em&gt; is probably one of the chief questions most people ask when they hear it. Some people regard DevOps as a fad rather than an actual solution, or something that programmers are already doing. That said, many people regarded Lean, Agile, and OOP as fads as they emerged and now they’re quite the staples of our industry. Explaining what exactly DevOps is isn’t really the direction of this article, but there are many resources at hand to help you find your way if you feel lost.&lt;/p&gt;

&lt;h4 id=&quot;for-a-junior-devops-engineer-there-are-a-few-things-you-need-to-know-and-understand-in-order-to-be-successful&quot;&gt;For a junior DevOps Engineer there are a few things you need to know and understand in order to be successful.&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Ruby and Python.&lt;/strong&gt; There are many other languages that are popular but these two are chief in automation and metrics collection. They are virtually system agnostic, although, libraries can tend to favor certain operating systems. This is why having a good foundation in reading and understanding code is imperative. Believe it or not many Linux System Engineers cannot read and understand non-procedural code or don’t understand OOP design principles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux.&lt;/strong&gt; In this writers humble opinion Linux is the old trusty of DevOps. Nearly every enterprise is using Linux and even Microsoft has it’s own take on the bourne shell with powershell. Linux has been the beacon of efficiency and security for decades and will only continue to grow. Familiarize yourself with the standards and practices of both GNU/Linux and Redhat variations. That is, the five most important, being Debian, Ubuntu, CentOS, Redhat (RHEL), and Fedora. It’s also worth looking at distros like Alpine which are advertised as container ready and minimal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtualization.&lt;/strong&gt; Whether you’re in development or production a working knowledge of virtualization is paramount. Tools like Virtualbox in combination with Hashicorp’s Vagrant have revolutionized the way we test expected outcomes. Even classical developers are starting to use Vagrant, realizing the power that it holds to mimic a production environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuration Correction &amp;amp; Automation.&lt;/strong&gt; The modern enterprise no longer desires to consist of hundreds of teams of systems administrators. Now, using code such as Ruby, Python and Perl, small teams are orchestrating wide arrays of configuration management for hundreds if not thousands of servers at a time. Just a few titles in this category are Puppet, Chef, Ansible and Salt but there are many more. This in combination with automated provisioning puts these tools above all else. I have not mentioned automated provisioning as it’s not really entirely required at a junior level for most organizations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS.&lt;/strong&gt; Any configuration management or automation tool such as Puppet, Chef, Ansible or Salt all require some sort of private authoritative DNS server, so it’s important to know and understand how DNS works. In order to understand DNS you will need a very basic understanding of subnetting. That said, a lot of DevOps Engineers in their junior years will also be tasked with managing day to day operations with a DNS CDN such as Cloudflare. You should have a working knowledge of how DNS is managed, the difference between A records and CNAME‘s as well as some DNS management principles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monitoring.&lt;/strong&gt; Monitoring resources on a virtual machine is pretty important too. Lots of organizations use Open Source tools such as Bosun, Zabbix, Icinga or, the old trusty, Nagios. Some organizations prefer a simple yet powerful implementation of Ganglia and collectd or statsd. All of these are acceptable solutions and really you just need to be familiar with common terms in statistics collection and configuration to make useful outputs. Whether you’re monitoring system resources, file changes or API uptimes the concepts are virtually all the same.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database Management.&lt;/strong&gt; Commonly DevOps Engineers are asked to build queries. This isn’t so much a DBA job, as DBA’s usually manage the configuration of large scale long term or short term storage technology, it’s more coming up with stored procedures that can be useful. Most organizations will accept a working knowledge of mySQL and common commands/queries. If you already know a lot of things I’ve listed then check out MongoDB, Redis, and Hadoop – you will surely see this further down your career path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logging.&lt;/strong&gt; Aggregating logs is important in the troubleshooting process. Now I can go to one simple place and query the logs of a particular server, group of servers, etc… Some of the tools organizations are using today are ELK Stack, Greylog and Splunk. All of these have their own advantages and disadvantages but GreyLog is by far the easiest to get up and running on RHEL, while ELK will take some specific knowledge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git &amp;amp; SSH.&lt;/strong&gt; Git is a code repository software used to manage changes, push to production and other useful things. Many coders have turned their entire website into Git Repositories. With this comes a working knowledge of SSH. That’s any implementation of ssh such as SCP, tunneling, key pairs and more. Check out a fun video of what Bo Jeanes did with SSH!&lt;/p&gt;

&lt;h3 id=&quot;other-things-you-can-expect-out-of-a-devops-position&quot;&gt;Other things you can expect out of a DevOps Position&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Be ready to be challenged every day&lt;/li&gt;
  &lt;li&gt;Know the basics of Agile&lt;/li&gt;
  &lt;li&gt;Once you’re familiar with all of the above, think about how you can implement DevOps philosophies&lt;/li&gt;
  &lt;li&gt;Be ready to code!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UDemy (Same as Code Academy but with academic courses)&lt;/li&gt;
  &lt;li&gt;Code Academy (Git, Python, Ruby, Shell) It’s free!&lt;/li&gt;
  &lt;li&gt;DevOps Bookmarks&lt;/li&gt;
  &lt;li&gt;The Agile Admin blog&lt;/li&gt;
  &lt;li&gt;Reddit DevOps&lt;/li&gt;
  &lt;li&gt;Freenode IRC ##devops&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DevOps is a beautiful career path with lots of daily challenges and problem solving. DevOps Engineers usually rest in a space between Developers and Systems Administrators with a special adeptness for details. It’s a fun and exciting career field and I look forward to everyone making their way there.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Feb 2017 00:00:00 +0100</pubDate>
        <link>https://www.mattouille.com/articles/2017-02/starting-a-career-in-devops</link>
        <guid isPermaLink="true">https://www.mattouille.com/articles/2017-02/starting-a-career-in-devops</guid>
        
        <category>DevOps</category>
        
        
        <category>DevOps</category>
        
        <category>OpEd</category>
        
      </item>
    
  </channel>
</rss>
